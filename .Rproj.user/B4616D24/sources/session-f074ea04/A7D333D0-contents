---
title: "Modern Counterparts (Nightingale • Playfair • Minard)"
output: html_document
date: "`r Sys.Date()`"
author: "Historical Visualization Recreation Project"
---

## Modern Statistical Graphics Counterparts

This notebook creates contemporary versions of the three historical datasets using current best practices in data visualization. Each historical visualization is reimagined using:

- **Modern visual encodings** (direct channel mapping, clear hierarchies)
- **Current design principles** (minimalist aesthetics, optimal data-ink ratio)
- **Contemporary chart types** (small multiples, faceting, interactive elements)
- **Accessible color palettes** (colorblind-friendly, high contrast)

### Comparison Framework

For each dataset, we create **2-3 modern alternatives** to test against the historical originals:

1. **Nightingale (Crimean War mortality)** → Stacked bar chart + Annotated heatmap
2. **Playfair (East India trade)** → Dual-axis line chart + Slopegraph  
3. **Minard (Napoleon's campaign)** → Small-multiple line chart + Animated flow map

All modern versions prioritize **clarity, accessibility, and cognitive efficiency** while preserving the same underlying data relationships.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.retina = 2)

# Clean environment
rm(list = ls())
```

```{r load-packages, message=FALSE, warning=FALSE, echo=FALSE}
# Set CRAN mirror for package installation
if (length(getOption("repos")) == 0 || getOption("repos")["CRAN"] == "@CRAN@") {
  options(repos = c(CRAN = "https://cloud.r-project.org/"))
}

# Core packages (most likely already installed)
required_core <- c("tidyverse", "lubridate", "patchwork", "scales", "janitor")

# Optional packages for advanced features
required_optional <- c("RColorBrewer", "viridis", "plotly", "gganimate", "transformr", "glue")

# Install and load core packages
need_install_core <- setdiff(required_core, rownames(installed.packages()))
if (length(need_install_core) > 0) {
  cat("Installing core packages:", paste(need_install_core, collapse = ", "), "\n")
  install.packages(need_install_core)
}

# Load core packages
for (pkg in required_core) {
  library(pkg, character.only = TRUE)
}

# Try to install optional packages (silently fail if issues)
for (pkg in required_optional) {
  if (!requireNamespace(pkg, quietly = TRUE)) {
    try(install.packages(pkg), silent = TRUE)
  }
  if (requireNamespace(pkg, quietly = TRUE)) {
    library(pkg, character.only = TRUE)
  }
}

# Create output directory
dir.create("outputs", showWarnings = FALSE)

# Helper function to check file existence
need <- function(path) {
  if (!file.exists(path)) stop("Missing file: ", path,
                               "\nRun data_collection.Rmd first.", call. = FALSE)
  path
}

# Modern color palettes (colorblind-friendly)
modern_colors <- list(
  categorical = c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b"),
  sequential = c("#440154", "#482777", "#3f4a8a", "#31678e", "#26838f", "#1f9d8a", "#6cce5a", "#b6de2b", "#fee825", "#f0f921"),
  diverging = c("#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061")
)
```

## 1. Nightingale Data: Modern Mortality Visualizations

```{r nightingale-modern, message=FALSE, warning=FALSE, echo=FALSE}
# ==== LOAD NIGHTINGALE DATA ====
ng_path <- need("case1_nightingale/data/nightingale_raw.csv")
ng_raw <- readr::read_csv(ng_path, show_col_types = FALSE)

# Clean and prepare data
ng_clean <- ng_raw |>
  janitor::clean_names() |>
  mutate(
    date = if_else(
      !is.na(date), 
      lubridate::ymd(date),
      lubridate::make_date(year, match(substr(month, 1, 3), month.abb), 15)
    ),
    period = if_else(date < as.Date("1855-04-01"), "Before Sanitary Reform", "After Sanitary Reform")
  ) |>
  arrange(date) |>
  select(date, period, disease, wounds, other) |>
  pivot_longer(c(disease, wounds, other), names_to = "cause", values_to = "deaths") |>
  mutate(
    cause = factor(cause, 
                   levels = c("disease", "wounds", "other"),
                   labels = c("Preventable Disease", "Battle Wounds", "Other Causes")),
    month_year = format(date, "%b %Y"),
    deaths_per_1000 = deaths * 1000 / 12000  # Approximate rate calculation
  )

# ==== MODERN VERSION 1: STACKED BAR CHART ====
p_ng_bars <- ng_clean |>
  ggplot(aes(x = date, y = deaths, fill = cause)) +
  geom_col(position = "stack", width = 20, alpha = 0.8) +
  scale_fill_manual(
    values = c("Preventable Disease" = "#d73027", 
               "Battle Wounds" = "#fc8d59", 
               "Other Causes" = "#91bfdb"),
    name = "Cause of Death"
  ) +
  scale_x_date(
    date_breaks = "3 months",
    date_labels = "%b\n%Y",
    expand = expansion(mult = c(0.02, 0.02))
  ) +
  scale_y_continuous(
    labels = scales::comma_format(),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Crimean War Mortality by Cause",
    subtitle = "Monthly deaths by category, April 1854 - March 1856",
    x = "Time Period", 
    y = "Number of Deaths",
    caption = "Data shows dramatic impact of sanitary reforms in 1855"
  ) +
  theme_minimal(base_size = 11) +
  theme(
    legend.position = "top",
    legend.direction = "horizontal",
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_line(color = "gray90", linewidth = 0.5),
    axis.text.x = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11, color = "gray40")
  ) +
  # Add annotation highlighting the reform period
  annotate("rect", xmin = as.Date("1855-04-01"), xmax = as.Date("1856-03-31"),
           ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "green") +
  annotate("text", x = as.Date("1855-09-01"), y = 1500, 
           label = "Post-Reform Period", size = 3, color = "darkgreen", fontface = "italic")

print(p_ng_bars)

# ==== MODERN VERSION 2: HEATMAP CALENDAR ====
ng_heatmap_data <- ng_clean |>
  group_by(date, period) |>
  summarise(total_deaths = sum(deaths), .groups = "drop") |>
  mutate(
    month = lubridate::month(date, label = TRUE),
    year = lubridate::year(date),
    deaths_scaled = scale(total_deaths)[,1]  # Standardize for color mapping
  )

p_ng_heatmap <- ng_heatmap_data |>
  ggplot(aes(x = month, y = year, fill = total_deaths)) +
  geom_tile(color = "white", linewidth = 1) +
  scale_fill_gradient2(
    low = "#3f4a8a", mid = "#26838f", high = "#fee825",
    midpoint = median(ng_heatmap_data$total_deaths, na.rm = TRUE),
    name = "Total\nDeaths",
    labels = scales::comma_format()
  ) +
  scale_y_continuous(breaks = c(1854, 1855, 1856)) +
  labs(
    title = "Crimean War Mortality Heatmap",
    subtitle = "Total deaths per month, color intensity shows severity",
    x = "Month", 
    y = "Year",
    caption = "Clear reduction in mortality intensity after April 1855 reforms"
  ) +
  theme_minimal(base_size = 11) +
  theme(
    legend.position = "right",
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11, color = "gray40")
  ) +
  coord_equal()

print(p_ng_heatmap)

# Export both versions
ggsave("outputs/nightingale_modern_bars.png", p_ng_bars, width = 10, height = 6, dpi = 300, bg = "white")
ggsave("outputs/nightingale_modern_heatmap.png", p_ng_heatmap, width = 8, height = 5, dpi = 300, bg = "white")
```

## 2. Playfair Data: Modern Trade Visualizations

```{r playfair-modern, message=FALSE, warning=FALSE, echo=FALSE}
# ==== LOAD PLAYFAIR DATA ====
pf_path <- need("case2_playfair/data/playfair_raw.csv")
pf_raw <- readr::read_csv(pf_path, show_col_types = FALSE)

# Clean and prepare data
pf_clean <- pf_raw |>
  janitor::clean_names() |>
  mutate(
    trade_balance = exports - imports,
    balance_type = if_else(trade_balance >= 0, "Surplus", "Deficit"),
    exports_scaled = exports / 1000,  # Convert to thousands
    imports_scaled = imports / 1000
  ) |>
  arrange(year)

# ==== MODERN VERSION 1: DUAL-AXIS LINE CHART ====
# Note: Dual-axis is generally discouraged, but testing as modern equivalent
p_pf_dual <- pf_clean |>
  ggplot(aes(x = year)) +
  # Trade volume lines
  geom_line(aes(y = exports_scaled, color = "Exports"), linewidth = 1.2) +
  geom_line(aes(y = imports_scaled, color = "Imports"), linewidth = 1.2) +
  # Trade balance ribbon
  geom_ribbon(aes(ymin = pmin(exports_scaled, imports_scaled),
                  ymax = pmax(exports_scaled, imports_scaled),
                  fill = balance_type), alpha = 0.3) +
  scale_color_manual(
    values = c("Exports" = "#2166ac", "Imports" = "#762a83"),
    name = "Trade Flow"
  ) +
  scale_fill_manual(
    values = c("Surplus" = "#d1e5f0", "Deficit" = "#f1b6da"),
    name = "Trade Balance"
  ) +
  scale_x_continuous(
    breaks = seq(1700, 1800, 20),
    minor_breaks = seq(1700, 1800, 10)
  ) +
  scale_y_continuous(
    labels = scales::comma_format(suffix = "k"),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "East India Company Trade Balance (1700-1772)",
    subtitle = "Imports, exports, and trade balance over time",
    x = "Year",
    y = "Value (£ thousands)",
    caption = "Ribbon shows trade surplus (blue) vs deficit (pink) periods"
  ) +
  theme_minimal(base_size = 11) +
  theme(
    legend.position = "top",
    legend.box = "horizontal",
    panel.grid.minor.y = element_blank(),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11, color = "gray40")
  )

print(p_pf_dual)

# ==== MODERN VERSION 2: SLOPEGRAPH ====
# Compare key periods (start, middle, end)
pf_slope_data <- pf_clean |>
  filter(year %in% c(1700, 1740, 1772)) |>
  select(year, exports_scaled, imports_scaled) |>
  pivot_longer(c(exports_scaled, imports_scaled), 
               names_to = "trade_type", values_to = "value") |>
  mutate(
    trade_type = if_else(trade_type == "exports_scaled", "Exports", "Imports"),
    year_label = paste0(year)
  )

p_pf_slope <- pf_slope_data |>
  ggplot(aes(x = year_label, y = value, color = trade_type, group = trade_type)) +
  geom_line(linewidth = 2, alpha = 0.7) +
  geom_point(size = 4) +
  geom_text(aes(label = scales::comma(value, suffix = "k")), 
            hjust = -0.3, vjust = 0.5, size = 3, fontface = "bold") +
  scale_color_manual(
    values = c("Exports" = "#2166ac", "Imports" = "#762a83"),
    name = ""
  ) +
  scale_y_continuous(
    labels = scales::comma_format(suffix = "k"),
    expand = expansion(mult = c(0.1, 0.15))
  ) +
  labs(
    title = "East India Trade: Key Period Comparison",
    subtitle = "Exports vs Imports at three time points",
    x = "Time Period",
    y = "Value (£ thousands)",
    caption = "Shows convergence of trade flows over 72-year period"
  ) +
  theme_minimal(base_size = 11) +
  theme(
    legend.position = "top",
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11, color = "gray40")
  )

print(p_pf_slope)

# Export both versions
ggsave("outputs/playfair_modern_dual.png", p_pf_dual, width = 10, height = 6, dpi = 300, bg = "white")
ggsave("outputs/playfair_modern_slope.png", p_pf_slope, width = 8, height = 6, dpi = 300, bg = "white")
```

## 3. Minard Data: Modern Campaign Visualizations

```{r minard-modern, message=FALSE, warning=FALSE, echo=FALSE}
# ==== LOAD MINARD DATA ====
troops_path <- need("case3_minard/data/minard_troops_raw.csv")
temps_path <- need("case3_minard/data/minard_temp_raw.csv")

troops_raw <- readr::read_csv(troops_path, show_col_types = FALSE) |>
  janitor::clean_names() |>
  mutate(direction = recode(direction, "A" = "Advance", "R" = "Retreat"))

temps_raw <- readr::read_csv(temps_path, show_col_types = FALSE) |>
  janitor::clean_names()

# ==== MODERN VERSION 1: SMALL MULTIPLES LINE CHART ====
# Separate army losses and temperature into clean line charts
troops_summary <- troops_raw |>
  arrange(group, long) |>
  group_by(direction) |>
  mutate(
    position = row_number(),
    survivors_k = survivors / 1000
  ) |>
  ungroup()

p_minard_lines <- troops_summary |>
  ggplot(aes(x = position, y = survivors_k, color = direction)) +
  geom_line(linewidth = 1.5, alpha = 0.8) +
  geom_point(size = 2, alpha = 0.7) +
  scale_color_manual(
    values = c("Advance" = "#2166ac", "Retreat" = "#762a83"),
    name = "Campaign Phase"
  ) +
  scale_y_continuous(
    labels = scales::comma_format(suffix = "k"),
    expand = expansion(mult = c(0, 0.05))
  ) +
  facet_wrap(~direction, scales = "free_x", 
             labeller = labeller(direction = c("Advance" = "Advance to Moscow", 
                                              "Retreat" = "Retreat from Moscow"))) +
  labs(
    title = "Napoleon's Army: Personnel Losses Over Campaign",
    subtitle = "Troop numbers during advance and retreat phases",
    x = "Campaign Position (Sequential)",
    y = "Army Size (thousands)",
    caption = "Shows catastrophic losses during retreat phase"
  ) +
  theme_minimal(base_size = 11) +
  theme(
    legend.position = "none",  # Redundant with facet labels
    strip.text = element_text(face = "bold", size = 12),
    strip.background = element_rect(fill = "gray95", color = "white"),
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11, color = "gray40")
  )

print(p_minard_lines)

# ==== MODERN VERSION 2: TEMPERATURE CORRELATION ====
# Combine temperature with retreat losses for correlation analysis
retreat_data <- troops_raw |>
  filter(direction == "Retreat") |>
  arrange(long) |>
  mutate(position = row_number())

# Match temperature data to retreat positions (approximate)
temp_retreat <- temps_raw |>
  arrange(long) |>
  mutate(position = row_number()) |>
  select(position, temp, long) |>
  full_join(retreat_data, by = "position") |>
  filter(!is.na(temp), !is.na(survivors)) |>
  mutate(survivors_k = survivors / 1000)

p_minard_temp <- temp_retreat |>
  ggplot(aes(x = temp, y = survivors_k)) +
  geom_point(size = 3, alpha = 0.7, color = "#762a83") +
  geom_smooth(method = "lm", se = TRUE, color = "#d73027", fill = "#fee0d2") +
  scale_y_continuous(
    labels = scales::comma_format(suffix = "k"),
    expand = expansion(mult = c(0.05, 0.05))
  ) +
  labs(
    title = "Temperature vs Army Survival: Napoleon's Retreat",
    subtitle = "Correlation between harsh winter conditions and troop losses",
    x = "Temperature (°C)",
    y = "Surviving Troops (thousands)",
    caption = "Each point represents a position during the retreat from Moscow"
  ) +
  theme_minimal(base_size = 11) +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11, color = "gray40")
  )

print(p_minard_temp)

# Export both versions
ggsave("outputs/minard_modern_lines.png", p_minard_lines, width = 10, height = 6, dpi = 300, bg = "white")
ggsave("outputs/minard_modern_temp.png", p_minard_temp, width = 8, height = 6, dpi = 300, bg = "white")
```

## Summary

### Modern Design Principles Applied

1. **Clear Visual Hierarchy**: Titles, subtitles, and captions guide interpretation
2. **Accessible Color Palettes**: Colorblind-friendly schemes with high contrast
3. **Optimal Data-Ink Ratio**: Minimal non-data ink, clean backgrounds
4. **Direct Encoding**: Straightforward position/length channels vs complex polar/flow mappings
5. **Contextual Annotations**: Text and shading highlight key insights
6. **Consistent Typography**: Professional, readable font choices

### Chart Type Rationale

- **Stacked bars vs polar areas**: Linear scales easier to compare precisely
- **Heatmaps vs rose diagrams**: Calendar layout provides temporal context
- **Dual-axis vs overlaid encoding**: Tests controversial but common modern practice
- **Slopegraphs vs time series**: Emphasizes change between key periods
- **Small multiples vs geographic flow**: Separates concerns for clearer analysis
- **Scatterplots vs flow maps**: Direct correlation analysis vs geographic metaphor

All modern versions prioritize **cognitive efficiency** and **perceptual accuracy** over aesthetic innovation, following contemporary evidence-based design principles.

```{r session-info}
# Export session information for reproducibility
sessionInfo()
```
